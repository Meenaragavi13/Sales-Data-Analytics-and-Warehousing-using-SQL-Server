use DataWarehouse;

EXEC silver.load_silver;

CREATE OR ALTER PROCEDURE silver.load_silver AS
BEGIN
    DECLARE @start_time DATETIME, @end_time DATETIME, @batch_start_time DATETIME, @batch_end_time DATETIME;
	Begin TRY
	    SET @batch_start_time=GETDATE();
		print '======================================';
		print 'Loading Silver Layer';
		print '======================================';

		print '---------------------------------------';
		print 'Loading CRM tables';
		print '---------------------------------------';

		--Cleaned crm_cust_info
		Set @start_time=GETDATE();
		PRINT '>>Truncating Table: SILVER.crm_cust_info';
		TRUNCATE TABLE SILVER.crm_cust_info;

		print '>>Inserting data into SILVER.crm_cust_info';
		INSERT INTO SILVER.crm_cust_info(
		cst_id,cst_key,cst_firstname,cst_lastname,cst_material_status,cst_gndr,
		cst_create_date)
		SELECT 
		cst_id,
		cst_key,
		TRIM(cst_firstname) as cst_firstname,
		TRIM(cst_lastname) as cst_lastname,
		CASE WHEN UPPER(TRIM(cst_material_status)) = 'S' THEN 'Single'
			 when UPPER(TRIM(cst_material_status)) = 'M' THEN 'Married'
			 ELSE 'n/a'
			 END as cst_material_status,
		CASE WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
			 when UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
			 ELSE 'n/a'
			 END as cst_gndr,
		cst_create_date
		FROM
		(SELECT *,
		ROW_NUMBER() OVER(PARTITION BY CST_ID ORDER BY CST_CREATE_DATE DESC) AS FLAG_LAST
		FROM Bronze.crm_cust_info)T WHERE FLAG_LAST=1 and cst_id is NOT NULL;
		
		Set @end_time=GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(SECOND,@start_time,@end_time) AS VARCHAR) +' Seconds';
		PRINT '>>  ---------';


		--Cleaned crm_sales_details
		SET @start_time = GETDATE();
		PRINT '>>Truncating Table: silver.crm_sales_details';
		TRUNCATE TABLE silver.crm_sales_details;

		print '>>Inserting data into silver.crm_sales_details';
		INSERT INTO silver.crm_sales_details (sls_ord_num,
		sls_prd_key,
		sls_cust_id,
		sls_order_dt,
		sls_ship_dt,
		sls_due_dt,
		sls_sales,
		sls_quantity,
		sls_price
		)
		Select 
		sls_ord_num,
		sls_prd_key,
		sls_cust_id,
		CASE WHEN sls_order_dt = 0 OR LEN(sls_order_dt)!=8 THEN NULL
			 ELSE CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)
			 END AS sls_order_dt,
		CASE WHEN sls_ship_dt = 0 OR LEN(sls_ship_dt)!=8 THEN NULL
			 ELSE CAST(CAST(sls_ship_dt AS VARCHAR) AS DATE)
			 END AS sls_ship_dt,
		CASE WHEN sls_due_dt = 0 OR LEN(sls_due_dt)!=8 THEN NULL
			 ELSE CAST(CAST(sls_due_dt AS VARCHAR) AS DATE)
			 END AS sls_due_dt,
		CASE when sls_sales IS NULL OR sls_sales <=0 OR sls_sales != sls_quantity * ABS(sls_price)
			 then sls_quantity * ABS(sls_price)
			 ELSE sls_sales
		END as sls_sales,
		sls_quantity,
		CASE WHEN sls_price is NULL OR sls_price<=0
			 THEN sls_sales/ NULLIF(sls_quantity,0)
			 ELSE sls_price
		END AS SLS_price
		from bronze.crm_sales_details;
		Set @end_time=GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(SECOND,@start_time,@end_time) AS VARCHAR) +' Seconds';
		PRINT '>>  ---------';

		--cleaned crm_prod
		SET @start_time = GETDATE();
		PRINT '>>Truncating Table: silver.crm_prod_info';
		TRUNCATE TABLE silver.crm_prod_info;

		print '>>Inserting data into silver.crm_prod_info';

		Insert into silver.crm_prod_info
		(prd_id,
		cat_id,
		prd_key,
		prd_nm,
		prd_cost,
		prd_line,
		prd_start_dt,
		prd_end_dt)

		SELECT
		prd_id,
		REPLACE(SUBSTRING(prd_key,1,5),'-','_') as cat_id,
		SUBSTRING(prd_key,7,LEN(prd_key)) as prd_key, 
		prd_nm,
		ISNULL(prd_cost,0) as prd_cost,
		case upper(trim(prd_line))
			 when 'M' then 'Mountain'
			 when 'R' then 'Road'
			 when 'T' then 'Touring'
			 when 'S' then 'Other Sales'
			 ELSE 'N/A'
			 END AS PRD_LINE,
		CAST(prd_start_dt AS DATE) AS prd_start_dt,
		CAST(
			LEAD(prd_start_dt) OVER(partition by prd_key ORDER BY prd_start_dt)-1 
			AS DATE) AS prd_end_dt_test -- Created end date as the start date of the next record -1
		from bronze.crm_prod_info;
		Set @end_time=GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(SECOND,@start_time,@end_time) AS VARCHAR) +' Seconds';
		PRINT '>>  ---------';

		--cleaned erp_loc_a101
		SET @start_time = GETDATE();
		PRINT '>>Truncating Table: silver.erp_loc_a101';
		TRUNCATE TABLE silver.erp_loc_a101;

		print '>>Inserting data into silver.erp_loc_a101';
		INSERT INTO silver.erp_loc_a101
		(cid,cntry)
		SELECT
		REPLACE(CID,'-','') AS CID,
		CASE WHEN TRIM(cntry) = 'DE' then 'Germany'
			 WHEN TRIM(cntry) IN ('US','USA') then 'United States'
			 WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'n/a'
			 ELSE TRIM(CNTRY)
		END AS cntry
		from bronze.erp_loc_a101;

		Set @end_time=GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(SECOND,@start_time,@end_time) AS VARCHAR) +' Seconds';
		PRINT '>>  ---------';

		--cleaned erp_cust_az12
		set @start_time = GETDATE();
		PRINT '>>Truncating Table:  silver.erp_cust_az12';
		TRUNCATE TABLE  silver.erp_cust_az12;

		print '>>Inserting data into silver.erp_cust_az12';
		INSERT INTO silver.erp_cust_az12 (cid,bdate,gen)
		Select 
		CASE WHEN CID LIKE 'NAS%' THEN SUBSTRING(CID,4,LEN(CID))
			 ELSE CID
		END cid,
		CASE WHEN bdate > GETDATE() THEN NULL
			 ELSE bdate
		END AS bdate,
		case WHEN UPPER(TRIM(GEN)) IN ('F','FEMALE') then 'Female'
			 WHEN UPPER(TRIM(GEN)) IN ('M','MALE')  THEN 'Male'
			 ELSE 'N/A'
		END AS GEN
		from bronze.erp_cust_az12;
		Set @end_time=GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(SECOND,@start_time,@end_time) AS VARCHAR) +' Seconds';
		PRINT '>>  ---------';

		--cleaned erp_px_cat_g1
		SET @start_time = GETDATE();

		PRINT '>>Truncating Table: Silver.erp_px_cat_g1v2';
		TRUNCATE TABLE silver.erp_px_cat_g1v2;

		print '>>Inserting data into Silver.erp_px_cat_g1v2';
		INSERT INTO SILVER.erp_px_cat_g1v2
		(id,cat,subcat,maintenance)
		Select 
		id,
		cat,
		subcat,
		maintenance
		from bronze.erp_px_cat_g1v2;
		Set @end_time=GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(SECOND,@start_time,@end_time) AS VARCHAR) +' Seconds';
		PRINT '>>  ---------';

		SET @batch_end_time = GETDATE();
		Print '=======================================';
		PRINT 'Loading Silver Layer is Completed';
		PRINT '   - Total Load Duration: ' + CAST(DATEDIFF(SECOND,@batch_start_time,@batch_end_time) AS NVARCHAR) + ' Seconds';
		PRINT '=======================================';

	END TRY
	BEGIN CATCH
	    Print '=======================================';
		PRINT 'ERROR OCCURED DURING LOading Bronze Layer';
		PRINT 'ERROR Message' + ERROR_MESSAGE();
		PRINT 'ERROR Message' + CAST(ERROR_NUMBER() AS NVARCHAR);
		PRINT 'ERROR Message' + CAST(ERROR_STATE() AS NVARCHAR);
		PRINT '=======================================';
	END CATCH
END
